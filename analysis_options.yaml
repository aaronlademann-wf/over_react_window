analyzer:
  # Strong mode is required. Applies to the current project.
  strong-mode:
    # When compiling to JS, both implicit options apply to the current
    # project and all dependencies. They are useful to find possible
    # Type fixes or areas for explicit typing.
    implicit-casts: true
    implicit-dynamic: true
linter:
  rules:
    - annotate_overrides
    - avoid_double_and_int_checks
    - avoid_empty_else
    - avoid_init_to_null
    - avoid_positional_boolean_parameters
    - avoid_relative_lib_imports
    - avoid_return_types_on_setters
    - avoid_types_as_parameter_names
    - avoid_unused_constructor_parameters
    - await_only_futures
    - camel_case_types
    - cancel_subscriptions
    - close_sinks
    - control_flow_in_finally
    - directives_ordering
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    - hash_and_equals
    - implementation_imports
    - invariant_booleans
    - iterable_contains_unrelated_type
    - library_names
    - library_prefixes
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - only_throw_errors
    - package_names
    - package_prefixed_library_names
    - prefer_collection_literals
    - prefer_const_declarations
    - prefer_contains
    - prefer_function_declarations_over_variables
    - prefer_single_quotes
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_typing_uninitialized_variables
    - slash_for_doc_comments
    - test_types_in_equals
    - throw_in_finally
    - unawaited_futures
    - unnecessary_lambdas
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_statements
    - unrelated_type_equality_checks
    - valid_regexps
    - void_checks
